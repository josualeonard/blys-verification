{"version":3,"sources":["pages/Login.tsx","pages/Home.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["CSSTransition","require","Login","props","state","digits","errors","isEmpty","status","statusMessage","isVerifying","isVerified","setAppState","bind","handleFocus","handleKeyPress","handlePaste","handleKeyDown","handleSubmit","isLogin","this","event","keyCode","elm","target","fieldId","parseInt","getAttribute","onFieldUpdate","gotoPrevField","gotoNextField","num","key","pasted","clipboardData","getData","replace","blur","length","idx","i","inp","document","getElementById","isNaN","value","go","setTimeout","focus","setState","toString","blurNext","prevElm","select","preventDefault","filled","empty","verify","then","response","body","success","message","code","join","fetch","method","headers","JSON","stringify","json","firstInput","to","pathname","className","id","onSubmit","in","timeout","classNames","unmountOnExit","Array","from","e","data-field-id","type","defaultValue","autoComplete","autoCorrect","spellCheck","onKeyPress","onPaste","onKeyDown","onFocus","Component","Home","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qRAEMA,EAAgBC,EAAQ,IAkBTC,E,kDAGjB,WAAYC,GAAoB,IAAD,8BAC3B,cAAMA,IAoBMC,MAAe,CAC3BC,OAAQ,GACRC,OAAQ,GACRC,SAAS,EACTC,OAAQ,EACRC,cAAe,GACfC,aAAa,EACbC,YAAY,GAzBZ,EAAKP,MAAQ,CACTC,OAAQ,GACRC,OAAQ,GACRC,SAAS,EACTC,OAAQ,EACRC,cAAe,GACfC,aAAa,EACbC,YAAY,GAGhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKK,aAAe,EAAKA,aAAaL,KAAlB,gBAlBO,E,wDA+BnBM,EAAkBV,GAC1BW,KAAKjB,MAAMS,YAAYO,EAASV,K,oCAItBY,GACV,IAAMC,EAAUD,EAAMC,QAChBC,EAAMF,EAAMG,OACZC,EAAUC,SAASH,EAAII,aAAa,kBAC1C,OAAOL,GACH,KAAK,EAAGF,KAAKQ,cAAcL,GAAM,EAAGE,GAAU,GAAI,MAClD,KAAK,GACL,KAAK,GAAIL,KAAKS,cAAcJ,GAAU,MACtC,KAAK,GACL,KAAK,GAAIL,KAAKU,cAAcL,M,qCAIrBJ,GACX,IAAMU,EAAML,SAASL,EAAMW,KACrBT,EAAMF,EAAMG,OACZC,EAAUC,SAASH,EAAII,aAAa,kBAC1CP,KAAKQ,cAAcL,EAAKQ,EAAKN,K,kCAGrBJ,GACR,IAAMY,EAASZ,EAAMa,cAAcC,QAAQ,QAAQC,QAAQ,UAAW,IAChEb,EAAMF,EAAMG,OACZC,EAAUC,SAASH,EAAII,aAAa,kBACtCtB,EAASe,KAAKhB,MAAMC,OACpBC,EAASc,KAAKhB,MAAME,OAExB,GADAiB,EAAIc,OACDJ,EAAOK,OAAO,EAEb,IADA,IAAIC,EAAM,EACFC,EAAE,EAAEA,GAAGtC,EAAMG,OAAOmC,IAAK,CAC7B,IAAIC,EAAMC,SAASC,eAAe,QAAQH,GAO1C,GANGA,EAAEf,IACGpB,EAAOmC,EAAE,KACTnC,EAAOmC,EAAE,GAAK,GACdlC,EAAOkC,EAAE,IAAK,IAGnBA,GAAGf,EAAS,CACX,IAAMM,EAAME,EAAOM,GACnBA,IACIK,MAAMb,GAKF1B,EAAOmC,EAAE,KACTnC,EAAOmC,EAAE,GAAK,GACdlC,EAAOkC,EAAE,IAAK,IANlBnC,EAAOmC,EAAE,GAAKT,EACdzB,EAAOkC,EAAE,IAAK,EACXC,IAAKA,EAAII,MAAQd,Q,oCAY1BR,EAAUQ,EAAaN,GAAwC,IAAD,OAAtBqB,EAAsB,uDAAT,EAC3DzC,EAASe,KAAKhB,MAAMC,OACpBC,EAASc,KAAKhB,MAAME,OACpBC,EAASa,KAAKhB,MAAMG,QACxB,IAAIqC,MAAMnB,GAAU,CAChB,GAAGpB,EAAOiC,OAAOb,EACb,IAAI,IAAIe,EAAE,EAAEA,GAAGf,EAAQe,IACfnC,EAAOmC,EAAE,KACTnC,EAAOmC,EAAE,GAAK,IAEdlC,EAAOkC,EAAE,KACTlC,EAAOkC,EAAE,IAAK,GAI1BjC,GAAU,EAENqC,MAAMb,IAYNzB,EAAQmB,EAAQ,IAAM,EACtBF,EAAIc,OACJd,EAAIsB,MAAQ,GACZE,YAAW,WACPxB,EAAIyB,QACJ,EAAKC,SAAS,CAACzC,QAAS,EAAGH,OAAQA,EAAQC,OAAQA,EAAQC,QAASA,MACrE,OAjBHF,EAAQoB,EAAQ,GAAOM,GAAK,EAAGA,EAAImB,WAAW,GAC9C5C,EAAQmB,EAAQ,IAAM,EACtBL,KAAK6B,SAAS,CAACzC,OAAQ,EAAGH,OAAQA,EAAQC,OAAQA,EAAQC,QAASA,IAAU,WACzEgB,EAAIc,OACJd,EAAIsB,MAASd,GAAK,EAAGA,EAAI,GACzBgB,YAAW,WACJD,EAAG,EAAG,EAAKhB,cAAcL,EAASA,IAAUvB,EAAMG,QAChD,EAAKwB,cAAcJ,KACzB,W,oCAeLA,GAAmD,IAAlC0B,EAAiC,wDACtDC,EAAWV,SAASC,eAAe,SAAUlB,EAAQ,GAAGvB,EAAMG,OAAQoB,EAAQ,EAAEA,IACnF2B,IACCA,EAAQf,OACJc,GACAJ,YAAW,WACPK,EAAQJ,UACT,O,oCAKDvB,GACV,IAAM2B,EAAWV,SAASC,eAAe,SAAUlB,EAAQ,GAAG,EAAGA,EAAQ,EAAEA,IACxE2B,IACCA,EAAQf,OACRU,YAAW,WACPK,EAAQJ,UACT,O,kCAIC3B,GACLD,KAAKhB,MAAMM,YACVW,EAAMG,OAAOa,QAEbjB,KAAK6B,SAAS,CAACzC,OAAQ,IACvBa,EAAMG,OAAO6B,Y,mCAIRhC,GAAa,IAAD,OACrBA,EAAMiC,iBACN,IAAMjD,EAASe,KAAKhB,MAAMC,OACtBC,EAASc,KAAKhB,MAAME,OACpBiD,GAAiB,EACjBC,EAAQ,EACZ,GAAGnD,EAAOiC,OAAOpC,EAAMG,OAAQ,CAC3BkD,GAAS,EACT,IAAI,IAAIf,EAAE,EAAEA,GAAGtC,EAAMG,OAAOmC,MACpBnC,EAAOmC,EAAE,IAAMnC,EAAOmC,EAAE,GAAGF,QAAQ,KACnChC,EAAOkC,EAAE,IAAK,EACdgB,UAIR,IAAI,IAAIhB,EAAE,EAAEA,GAAGnC,EAAOiC,OAAOE,IACtBnC,EAAOmC,EAAE,GAAGF,QAAQ,IACnBiB,GAAS,EACTjD,EAAOkC,EAAE,IAAK,GAyB1B,OApBGe,EACCnC,KAAK6B,SAAS,CAACzC,OAAQ,EAAGE,aAAa,IAAO,WAC1C,EAAK+C,SAASC,MAAK,SAACC,GAChB,IAAMC,EAAOD,EAASC,MAAQ,GACxBC,EAAgC,aAArBD,EAAKpD,QAAU,IAC1BsD,EAAUF,EAAKE,SAAW,GAChC,EAAKb,SAAS,CAACvC,aAAa,EAAOF,OAAQqD,EAAQ,GAAG,EAAGpD,cAAeqD,IAAU,WAC3ED,GACCd,YAAW,WACP,EAAKnC,YAAYiD,EAASC,GAC1B,EAAKb,SAAS,CAACtC,YAAY,MAC5B,cAMnBS,KAAK6B,SAAS,CAACzC,QAAS,EAAGF,OAAQA,EAAQC,QAASiD,IAAQtD,EAAMG,UAG/D,I,wJAID0D,EAAO3C,KAAKhB,MAAMC,OAAO2D,KAAK,I,SACbC,MAAM,mBAAoB,CAC7CC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BP,KAAMQ,KAAKC,UAAU,CAACN,KAAMA,M,cAH1BJ,E,gBAKOA,EAASW,O,wLAItB,IAAMC,EAAa7B,SAASC,eAAe,UACxC4B,GAAYA,EAAWvB,U,gCAI1B,OAAO5B,KAAKhB,MAAMI,QACd,KAAM,EAAG,MAAO,iCAChB,KAAM,EAAG,OAAQY,KAAKhB,MAAMG,QAAS,oCAAoC,+BACzE,KAAM,EACN,KAAK,EAAG,OAAOa,KAAKhB,MAAMK,cAE9B,MAAO,K,+BAGa,IAAD,OACnB,OAAGW,KAAKhB,MAAMO,WAAmB,cAAC,IAAD,CAAU6D,GAAI,CAACC,SAAU,cACnD,cAAC,WAAD,UACH,qBAAKC,UAAW,kBAAkBtD,KAAKhB,MAAMM,YAAY,aAAa,IAAtE,SACI,uBAAMiE,GAAG,eAAeD,UAAU,OAAOE,SAAUxD,KAAKF,aAAxD,UACI,cAAClB,EAAD,CACI6E,GAAwB,IAApBzD,KAAKhB,MAAMI,OACfsE,QAAS,IACTC,WAAW,QACXC,eAAa,EAJjB,SAMI,qBAAKN,UAAU,QAAf,SAAuB,oBAAIA,UAAWtD,KAAKhB,MAAMI,OAAO,EAAE,UAAU,QAA7C,SAAuDY,KAAK0C,gBAEvF,oBAAIY,UAAU,OAAd,gCACA,qBAAKA,UAAU,OAAf,SAEQO,MAAMC,KAAKD,MAAM,IAAI,SAACE,EAAG3C,GACrB,OAAO,uBAAmBmC,GAAI,SAASnC,EAAE,GAAI4C,gBAAgB5C,EAAE,EAAI6C,KAAK,OAAOX,UAAW,EAAKtE,MAAME,OAAOgC,QAAQE,GAAG,EAAKpC,MAAME,OAAOkC,GAAG,QAAY,GAAI8C,aAAc,EAAKlF,MAAMC,OAAOiC,QAAQE,EAAE,EAAKpC,MAAMC,OAAOmC,GAAG,GAAI+C,aAAa,MAAMC,YAAY,MAAMC,YAAY,EAAOC,WAAY,EAAK3E,eAAgB4E,QAAS,EAAK3E,YAAa4E,UAAW,EAAK3E,cAAe4E,QAAS,EAAK/E,aAA5W0B,EAAE,QAIlC,qBAAKkC,UAAU,OAAf,SAEQtD,KAAKhB,MAAMM,YACP,qBAAKgE,UAAU,SAAf,SAAwB,sBAAKA,UAAU,eAAf,UAA8B,wBAAW,wBAAW,wBAAW,6BACvF,wBAAQW,KAAK,SAAb,iC,GAtQGS,aAAd5F,EACVG,OAAS,E,ICXC0F,E,kDACjB,WAAY5F,GAAmB,IAAD,8BAC1B,cAAMA,IAEDC,MAAQ,GAHa,E,qDAO1B,OAAO,cAAC,WAAD,UACH,qBAAKsE,UAAU,iBAAf,SACI,qBAAKA,UAAU,OAAf,SAEQtD,KAAKjB,MAAMgB,QACP,eAAC,WAAD,WACI,oBAAIuD,UAAU,OAAd,SAAsBtD,KAAKjB,MAAMM,gBACjC,oBAAIiE,UAAU,OAAd,+DAEJ,cAAC,WAAD,UACI,oBAAIA,UAAU,OAAd,kD,GAlBEoB,aCabE,G,wDACjB,WAAY7F,GAAY,IAAD,8BACnB,cAAMA,IAOMC,MAAe,CAC3Be,SAAS,EACTV,cAAe,IAPf,EAAKL,MAAQ,CAACe,SAAS,EAAOV,cAAe,qBAE7C,EAAKG,YAAc,EAAKA,YAAYC,KAAjB,gBALA,E,wDAcXM,EAAkBV,GAC1BW,KAAK6B,SAAS,CAAC9B,QAASA,EAASV,cAAeA,M,+BAIhD,OAAO,cAAC,WAAD,UACH,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOwF,KAAK,WAAZ,SACI,cAAC,EAAD,CAAM9E,QAASC,KAAKhB,MAAMe,QAASV,cAAeW,KAAKhB,MAAMK,kBAEjE,cAAC,IAAD,CAAOwF,KAAK,IAAZ,SACI,cAAC,EAAD,CAAOrF,YAAaQ,KAAKR,2B,GA3BhBkF,cCXlBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlE,SAASC,eAAe,SAM1BuD,M","file":"static/js/main.67101a57.chunk.js","sourcesContent":["import React, { Component, ReactElement, Fragment } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst CSSTransition = require('react-transition-group');\r\n\r\n/**\r\n * Interfaces\r\n */\r\ninterface LoginProps {\r\n    setAppState: (isLogin: boolean, statusMessage: string) => void\r\n}\r\ninterface State {\r\n    digits: string[],\r\n    errors: boolean[],\r\n    isEmpty: boolean,\r\n    status: number,\r\n    statusMessage: string,\r\n    isVerifying: false,\r\n    isVerified: false\r\n}\r\n\r\nexport default class Login extends Component<LoginProps> {\r\n    static digits = 6;\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            digits: [],\r\n            errors: [],\r\n            isEmpty: false,\r\n            status: 0,\r\n            statusMessage: \"\",\r\n            isVerifying: false,\r\n            isVerified: false\r\n        }\r\n\r\n        this.setAppState = this.setAppState.bind(this);\r\n        this.handleFocus = this.handleFocus.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.handlePaste = this.handlePaste.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    public readonly state: State = {\r\n        digits: [],\r\n        errors: [],\r\n        isEmpty: false,\r\n        status: 0,\r\n        statusMessage: \"\",\r\n        isVerifying: false,\r\n        isVerified: false\r\n    }\r\n\r\n    setAppState(isLogin: boolean, statusMessage: string): void {\r\n        this.props.setAppState(isLogin, statusMessage);\r\n    }\r\n\r\n    /* Prev/back field */\r\n    handleKeyDown(event: any) {\r\n        const keyCode = event.keyCode;\r\n        const elm = event.target;\r\n        const fieldId = parseInt(elm.getAttribute('data-field-id'));\r\n        switch(keyCode) {\r\n            case 8: this.onFieldUpdate(elm, -1, fieldId, -1); break;\r\n            case 37: this.gotoPrevField(fieldId); break;\r\n            case 38: this.gotoPrevField(fieldId); break;\r\n            case 39: this.gotoNextField(fieldId); break;\r\n            case 40: this.gotoNextField(fieldId); break;\r\n        }\r\n    }\r\n\r\n    handleKeyPress(event: any) {\r\n        const num = parseInt(event.key);\r\n        const elm = event.target;\r\n        const fieldId = parseInt(elm.getAttribute('data-field-id'));\r\n        this.onFieldUpdate(elm, num, fieldId);\r\n    }\r\n\r\n    handlePaste(event: any) {\r\n        const pasted = event.clipboardData.getData(\"Text\").replace(/[^0-9]/g, '');\r\n        const elm = event.target;\r\n        const fieldId = parseInt(elm.getAttribute('data-field-id'));\r\n        let digits = this.state.digits;\r\n        let errors = this.state.errors;\r\n        elm.blur();\r\n        if(pasted.length>0) {\r\n            let idx = 0;\r\n            for(let i=1;i<=Login.digits;i++) {\r\n                let inp = document.getElementById(\"input\"+i) as HTMLInputElement;\r\n                if(i<fieldId) {\r\n                    if(!digits[i-1]) {\r\n                        digits[i-1] = \"\";\r\n                        errors[i-1] = true;\r\n                    }\r\n                }\r\n                if(i>=fieldId) {\r\n                    const num = pasted[idx];\r\n                    idx++;\r\n                    if(!isNaN(num)) {\r\n                        digits[i-1] = num;\r\n                        errors[i-1] = false;\r\n                        if(inp) inp.value = num;\r\n                    } else {\r\n                        if(!digits[i-1]) {\r\n                            digits[i-1] = \"\";\r\n                            errors[i-1] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onFieldUpdate(elm: any, num: number, fieldId: number, go: number = 1): void {\r\n        let digits = this.state.digits;\r\n        let errors = this.state.errors;\r\n        let isEmpty= this.state.isEmpty;\r\n        if(!isNaN(fieldId)) {\r\n            if(digits.length<fieldId) {\r\n                for(let i=1;i<=fieldId;i++) {\r\n                    if(!digits[i-1]) {\r\n                        digits[i-1] = \"\";\r\n                    }\r\n                    if(!errors[i-1]) {\r\n                        errors[i-1] = false;\r\n                    }\r\n                }\r\n            }\r\n            isEmpty = false;\r\n\r\n            if(!isNaN(num)) {\r\n                digits[(fieldId-1)] = (num>=0)?num.toString():\"\";\r\n                errors[(fieldId-1)] = false;\r\n                this.setState({status: 0, digits: digits, errors: errors, isEmpty: isEmpty}, () => {\r\n                    elm.blur();\r\n                    elm.value = (num>=0)?num:\"\";\r\n                    setTimeout(() => {\r\n                        if(go>0) this.gotoNextField(fieldId, fieldId===Login.digits);\r\n                        else this.gotoPrevField(fieldId);\r\n                    }, 50);\r\n                });\r\n            } else {\r\n                errors[(fieldId-1)] = true;\r\n                elm.blur();\r\n                elm.value = \"\";\r\n                setTimeout(() => {\r\n                    elm.focus();\r\n                    this.setState({status: -1, digits: digits, errors: errors, isEmpty: isEmpty});\r\n                }, 100);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    gotoNextField(fieldId: number, blurNext: boolean = false): void {\r\n        const prevElm = (document.getElementById(\"input\"+((fieldId+1<=Login.digits)?fieldId+1:fieldId)) as HTMLInputElement);\r\n        if(prevElm) {\r\n            prevElm.blur();\r\n            if(!blurNext) {\r\n                setTimeout(() => {\r\n                    prevElm.focus();\r\n                }, 50); \r\n            }\r\n        }\r\n    }\r\n\r\n    gotoPrevField(fieldId: number): void {\r\n        const prevElm = (document.getElementById(\"input\"+((fieldId-1>=1)?fieldId-1:fieldId)) as HTMLInputElement);\r\n        if(prevElm) {\r\n            prevElm.blur();\r\n            setTimeout(() => {\r\n                prevElm.focus();\r\n            }, 50);\r\n        }\r\n    }\r\n\r\n    handleFocus(event: any) {\r\n        if(this.state.isVerifying) {\r\n            event.target.blur();\r\n        } else {\r\n            this.setState({status: 0});\r\n            event.target.select();\r\n        }\r\n    }\r\n\r\n    handleSubmit(event: any) {\r\n        event.preventDefault();\r\n        const digits = this.state.digits;\r\n        let errors = this.state.errors;\r\n        let filled:boolean = true;\r\n        let empty = 0;\r\n        if(digits.length<Login.digits) {\r\n            filled = false;\r\n            for(let i=1;i<=Login.digits;i++) {\r\n                if(!digits[i-1] || digits[i-1].length<=0) {\r\n                    errors[i-1] = true;\r\n                    empty++;\r\n                }\r\n            }\r\n        } else {\r\n            for(let i=1;i<=digits.length;i++) {\r\n                if(digits[i-1].length<=0) {\r\n                    filled = false;\r\n                    errors[i-1] = true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(filled) {\r\n            this.setState({status: 0, isVerifying: true}, () => {\r\n                this.verify().then((response) => {\r\n                    const body = response.body || {};\r\n                    const success = (body.status || \"\")===\"success\";\r\n                    const message = body.message || \"\";\r\n                    this.setState({isVerifying: false, status: success?1:-3, statusMessage: message}, () => {\r\n                        if(success) {\r\n                            setTimeout(() => {\r\n                                this.setAppState(success, message);\r\n                                this.setState({isVerified: true});\r\n                            }, 2000);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        } else {\r\n            this.setState({status: -2, errors: errors, isEmpty: empty===Login.digits});\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    async verify() {\r\n        const code = this.state.digits.join(\"\");\r\n        const response = await fetch(`/api/v1.0/verify`, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({code: code})\r\n        });\r\n        return await response.json();\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        const firstInput = document.getElementById(\"input1\");\r\n        if(firstInput) firstInput.focus();\r\n    }\r\n\r\n    message():string {\r\n        switch(this.state.status) {\r\n            case -1: return \"Invalid input, only use number\";\r\n            case -2: return (this.state.isEmpty)?\"Verification code cannot be empty\":\"Incomplete verification code\";\r\n            case -3: return this.state.statusMessage;\r\n            case 1: return this.state.statusMessage;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    render(): ReactElement {\r\n        if(this.state.isVerified) return <Redirect to={{pathname: \"/success\"}} />;\r\n        return <Fragment>\r\n            <div className={\"form-container\"+(this.state.isVerifying?\" verifying\":\"\")}>\r\n                <form id=\"verification\" className=\"form\" onSubmit={this.handleSubmit}>\r\n                    <CSSTransition\r\n                        in={this.state.status!==0}\r\n                        timeout={300}\r\n                        classNames=\"alert\"\r\n                        unmountOnExit\r\n                    >\r\n                        <div className=\"alert\"><h3 className={this.state.status>0?\"success\":\"error\"}>{this.message()}</h3></div>\r\n                    </CSSTransition>\r\n                    <h1 className=\"line\">Verification code:</h1>\r\n                    <div className=\"line\">\r\n                        {\r\n                            Array.from(Array(6), (e, i) => {\r\n                                return <input key={(i+1)} id={\"input\"+(i+1)} data-field-id={(i+1)} type=\"text\" className={this.state.errors.length>=i?(this.state.errors[i]?\"error\":\"\"):\"\"} defaultValue={this.state.digits.length>=i?this.state.digits[i]:\"\"} autoComplete=\"off\" autoCorrect=\"off\" spellCheck={false} onKeyPress={this.handleKeyPress} onPaste={this.handlePaste} onKeyDown={this.handleKeyDown} onFocus={this.handleFocus}></input>;\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"line\">\r\n                        {\r\n                            this.state.isVerifying?\r\n                                <div className=\"submit\"><div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div></div>:\r\n                                <button type=\"submit\">Submit</button>\r\n                        }\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </Fragment>;\r\n    }\r\n}","import React, { Component, ReactElement, Fragment } from \"react\";\r\n\r\n/**\r\n * Interfaces\r\n */\r\ninterface HomeProps {\r\n    isLogin: boolean,\r\n    statusMessage: string\r\n}\r\n\r\nexport default class Home extends Component<HomeProps> {\r\n    constructor(props: HomeProps) {\r\n        super(props);\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    render(): ReactElement {\r\n        return <Fragment>\r\n            <div className=\"form-container\">\r\n                <div className=\"form\">\r\n                    {\r\n                        this.props.isLogin?\r\n                            <Fragment>\r\n                                <h1 className=\"line\">{this.props.statusMessage}</h1>\r\n                                <h3 className=\"line\">You have entered the correct verification code</h3>\r\n                            </Fragment>:\r\n                            <Fragment>\r\n                                <h1 className=\"line\">You are not verified yet</h1>\r\n                            </Fragment>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Fragment>;\r\n    }\r\n}","import React, { Component, ReactElement, Fragment } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n  } from \"react-router-dom\";\r\n\r\nimport Login from './pages/Login';\r\nimport Home from './pages/Home';\r\n\r\nimport './App.css';\r\n\r\n/**\r\n * Interfaces\r\n */\r\ninterface State {\r\n    isLogin: boolean,\r\n    statusMessage: string\r\n}\r\n\r\n/**\r\n * Component\r\n */\r\nexport default class App extends Component {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        \r\n        this.state = {isLogin: false, statusMessage: \"Not authenticated\"};\r\n\r\n        this.setAppState = this.setAppState.bind(this);\r\n    }\r\n\r\n    public readonly state: State = {\r\n        isLogin: false,\r\n        statusMessage: \"\"\r\n    }\r\n\r\n    /* Update app state from login component */\r\n    setAppState(isLogin: boolean, statusMessage: string): void {\r\n        this.setState({isLogin: isLogin, statusMessage: statusMessage});\r\n    }\r\n\r\n    render(): ReactElement {\r\n        return <Fragment>\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/success\">\r\n                        <Home isLogin={this.state.isLogin} statusMessage={this.state.statusMessage} />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Login setAppState={this.setAppState} />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </Fragment>\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n/* If you want to start measuring performance in your app, pass a function\n   to log results (for example: reportWebVitals(console.log))\n   or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals */\nreportWebVitals();\n"],"sourceRoot":""}